class Solution {
public:
    bool solveUsingRecurion(vector<int> & nums , int index, int sum , int target){
        // base case
        if(index >= nums.size() ){
            return 0;  // or return false
        }
        if(sum > target ){
            return 0;  // or return false
        }
        if(sum == target){
            return true;
        }
        bool include = solveUsingRecurion(nums, index+1, sum + nums[index], target);
        bool exclude = solveUsingRecurion(nums, index+1 , sum , target);

        return (include || exclude);
    }

    bool canPartition(vector<int>& nums) {
        int index =0;
        int totalSum =0;
        for(int i=0 ;i<nums.size();i++){
            totalSum += nums[i];
        }
        if(totalSum & 1){
            // odd hai no partition possible
            return false;
        }
        int currSum =0;
        int target = totalSum /2;
        bool ans = solveUsingRecurion(nums , index, currSum , target);
        return ans;
    }
};
