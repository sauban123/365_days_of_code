/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solveUsingRecursion(TreeNode* root, vector<string> &arr, string &temp) {
        // Base case
        if (!root) {
            return;
        }
        temp += to_string(root->val);
        if (!root->left && !root->right) {
            // Store it into the vector arr
            arr.push_back(temp);
            temp.pop_back(); // Remove the last character to backtrack
            return;
        }
        solveUsingRecursion(root->left, arr, temp);
        solveUsingRecursion(root->right, arr, temp);
        temp.pop_back(); // Backtrack
    }
    
    int sumNumbers(TreeNode* root) {
        int sum = 0;
        vector<string> arr;
        string temp = "";
        solveUsingRecursion(root, arr, temp);
        for (auto &str : arr) {
            // Convert each string to an integer and add it to the sum
            sum += std::stoi(str);
        }
        return sum;
    }
};
