class Solution {
public:
    long long int mod = 1000000007;
    int solveUsingRecursion(int n, int k, int target, int diceUsed,
                            int currSum) {
        // base cases
        if (diceUsed == n && currSum == target) {
            return 1;
        }
        if (diceUsed != n && currSum == target) {
            return 0;
        }
        if (diceUsed == n && currSum != target) {
            return 0;
        }

        int ans = 0;
        for (int face = 1; face <= k; face++) {
            ans +=
                solveUsingRecursion(n, k, target, diceUsed + 1, currSum + face);
        }
        return ans;
    }

    int solveUsingMem(int n,int k,int target,int diceUsed,int currSum,vector<vector<int>>& dp) {
        // base cases
        if (diceUsed == n && currSum == target) {
            return 1;
        }
        if (diceUsed != n && currSum == target) {
            return 0;
        }
        if (diceUsed == n && currSum != target) {
            return 0;
        }
        if(dp[diceUsed][currSum ] != -1){
            return dp[diceUsed][currSum];
        }

        int ans = 0;
        for (int face = 1; face <= k; face++) {
            int recAns= 0;
            if(currSum +face <= target ){
                recAns = solveUsingMem(n, k, target, diceUsed + 1, currSum + face,dp) % mod;
            }
            ans  = (ans % mod  + recAns) %mod;
        }
        dp[diceUsed][currSum] = ans;
        return dp[diceUsed][currSum];
    }
    int numRollsToTarget(int n, int k, int target) {
        int diceUsed = 0;
        int currSum = 0;
        vector<vector<int>> dp(n + 1, vector<int>(target + 1, -1));
        int ans = solveUsingMem(n, k, target, diceUsed, currSum, dp);
        return ans;
    }
};
