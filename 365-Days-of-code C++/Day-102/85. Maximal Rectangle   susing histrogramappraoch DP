class Solution {
public:

    vector<int> nextSmallerElement(vector<int>arr){
        stack<int>s;
        s.push(-1);
        vector<int>ans(arr.size());
        for(int i=arr.size()-1;i>=0;i--){
            int curr=arr[i];
            while(s.top()!=-1&& arr[s.top()]>=curr){
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
        return ans;
    }
     vector<int> prevSmallerElement(vector<int>arr){
        stack<int>s;
        s.push(-1);
        vector<int>ans(arr.size());
        for(int i=0;i<arr.size();i++){
            int curr=arr[i];
            while(s.top()!=-1&&arr[s.top()]>=curr){
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
        return ans;
    }
    
public:
    int largestRectangleArea(vector<int>& heights) {
        vector<int> next=nextSmallerElement(heights);
        vector<int> prev=prevSmallerElement(heights);

        int maxArea=INT_MIN;
        for(int i=0;i<heights.size();i++){
            int length=heights[i];
            if(next[i]==-1){
                next[i]=heights.size();
            }
            int breadth=next[i]-prev[i]-1;
            int currArea=length*breadth;
            maxArea=max(maxArea,currArea);
        }
        return maxArea;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int maxi = INT_MIN;
        vector<int> histogram(matrix[0].size(),0);
        for(int i =0 ;i<matrix.size();i++){
            for(int j=0 ;j<matrix[0].size();j++){
                if(matrix[i][j] == '1'){
                    histogram[j]++;
                }
                else {
                    histogram[j] =0;
                }
            }
            maxi = max(maxi,largestRectangleArea(histogram) );
        }
        return maxi;
    }
};
