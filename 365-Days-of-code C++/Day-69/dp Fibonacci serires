class Solution {
public:
    int solveusingMemoisation(vector<int> dp , int n){
        if(n==0 || n==1) {
            return n;
        }
        if(dp[n] != -1){
            return dp[n];
        }
        dp[n] = solveusingMemoisation( dp,n-1) + solveusingMemoisation(dp,n-2);
        return dp[n];
    }
      
    int solveUsingTabulation(int n){
        vector<int> dp(n+1,-1);
        //base case
        dp[0]  =0;
        if(n==0){
            return 0;
        }
        dp[1] =1;
        for(int i=2; i<=n;i++){
            dp[i] = dp[i-1] +dp[i-2];
        }
        return dp[n];
    }
    
    int solveUsingTabulationSpaceOptimised(int n){
        
        //base case
        int prev =0;
        if(n==0){
            return 0;
        }
        int curr =1;
        if(n==1){
            return 1;
        }
        int ans;
        for(int i=2; i<=n;i++){
            ans = prev +curr;
            prev = curr;
            curr = ans;
        }
        return ans;
    }

    int fib(int n) {
        // vector<int> dp(n+1 ,-1);
        // return solveusingMemoisation(dp, n);

        return solveUsingTabulationSpaceOptimised(n);
    }
};
