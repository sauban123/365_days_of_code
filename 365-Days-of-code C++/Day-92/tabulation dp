class Solution {
public:
    int solveUsingRecursion(vector<int>& arr, map<pair<int, int>, int>& maxi,
                            int s, int e) {
        if (s > e) {
            return 0;
        }
        // agar single elemetn hai to leaf node hui kuch add nhi karna hia
        // return 0;
        if (s == e) {
            return 0;
        }
        int ans = INT_MAX;
        for (int i = s; i < e; i++) {
            // i is used for partitioning
            ans = min(ans, (maxi[{s, i}] * maxi[{i + 1, e}]) +
                               solveUsingRecursion(arr, maxi, s, i) +
                               solveUsingRecursion(arr, maxi, i + 1, e));
        }
        return ans;
    }

    int solveUsingRecursionMem(vector<int>& arr, map<pair<int, int>, int>& maxi,
                               int s, int e, vector<vector<int>>& dp) {
        if (s > e) {
            return 0;
        }
        // agar single elemetn hai to leaf node hui kuch add nhi karna hia
        // return 0;
        if (s == e) {
            return 0;
        }
        // check if alreasy exist
        if (dp[s][e] != -1) {
            return dp[s][e];
        }
        int ans = INT_MAX;
        for (int i = s; i < e; i++) {
            // i is used for partitioning
            ans = min(ans, (maxi[{s, i}] * maxi[{i + 1, e}]) +
                               solveUsingRecursionMem(arr, maxi, s, i, dp) +
                               solveUsingRecursionMem(arr, maxi, i + 1, e, dp));
        }
        dp[s][e] = ans;
        return dp[s][e];
    }


    int solveUsingTabulation(vector<int>& arr,map<pair<int, int>, int>& maxi) {
        int n = arr.size();
        vector<vector<int>> dp(n + 2, vector<int>(n + 1, 0));
        // isme loop s and e ka opposite chalte hai jo ki recursion or memoizatin
        // me chal rha hota hai
        for (int s_index = n; s_index>= 0; s_index--) {   // isme s index n+1 index acess kar 
            for (int e_index = 0; e_index <= n - 1; e_index++) {  //rha n+2 karo
                if (s_index >= e_index) { // danger = nalagane apar error
                    continue;
                }
                int ans = INT_MAX;
                for (int i = s_index; i < e_index; i++) {
                    // i is used for partitioning
                    ans = min(ans,(maxi[{s_index, i}] * maxi[{i + 1, e_index}])
                           + dp[s_index][i] 
                           + dp[i+1][e_index] );
                }
                dp[s_index][e_index] = ans;
            }
        }
        // isme s and e vo val rakhte jo loop me jis taraf ja rha hota hai 
        // s joki 0 ki taraf ans jarha isliye s=0
        // aur e wala 0 to n-1 tak chal rha to e = n-1
        return dp[0][n-1];
    }

    int mctFromLeafValues(vector<int>& arr) {
        // pre computation
        map<pair<int, int>, int> maxi;
        for (int i = 0; i < arr.size(); i++) {
            maxi[{i, i}] = arr[i];
            for (int j = i + 1; j < arr.size(); j++) {
                maxi[{i, j}] = max(arr[j], maxi[{i, j - 1}]);
            }
        }
        int n = arr.size();
        int start = 0;
        int end = n - 1;
        // vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));
        // int ans = solveUsingRecursionMem(arr, maxi, start, end, dp);
        int ans = solveUsingTabulation(arr,maxi);
        return ans;
    }
};
