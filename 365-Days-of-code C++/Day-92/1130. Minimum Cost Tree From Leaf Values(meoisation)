class Solution {
public:
    int solveUsingRecursion(vector<int> & arr,map<pair<int,int>,int> &maxi,int s , int e){
        if(s>e){
            return 0;
        }
        // agar single elemetn hai to leaf node hui kuch add nhi karna hia  return 0;
        if(s==e){
            return 0;
        }
        int ans = INT_MAX;
        for(int i=  s; i<e;i++){
            // i is used for partitioning 
            ans = min( ans , (maxi[{s,i}] * maxi[{i+1,e}]) 
                       + solveUsingRecursion(arr, maxi, s,i)
                       + solveUsingRecursion(arr, maxi , i+1,e) );
        }
        return ans;
    } 

    int solveUsingRecursionMem(vector<int> & arr,map<pair<int,int>,int> &maxi,int s , int e,vector<vector<int>> & dp){
        if(s>e){
            return 0;
        }
        // agar single elemetn hai to leaf node hui kuch add nhi karna hia  return 0;
        if(s==e){
            return 0;
        }
        // check if alreasy exist 
        if(dp[s][e] != -1){
            return dp[s][e];
        }
        int ans = INT_MAX;
        for(int i=  s; i<e;i++){
            // i is used for partitioning 
            ans = min( ans , (maxi[{s,i}] * maxi[{i+1,e}]) 
                       + solveUsingRecursionMem(arr, maxi, s,i,dp)
                       + solveUsingRecursionMem(arr, maxi , i+1,e,dp) );
        }
        dp[s][e] = ans;
        return dp[s][e];
    }    

    int mctFromLeafValues(vector<int>& arr) {
        // pre computation 
        map<pair< int, int> ,int>maxi;
        for(int i=0 ;i<arr.size();i++){
            maxi[{i,i}] = arr[i];
            for(int j= i+1;j<arr.size();j++){
                maxi[{i,j}] = max(arr[j], maxi[{i,j-1}]);
            }
        }
        int n = arr.size();
        int start =0;
        int end =n-1;
        vector<vector<int> > dp(n+1, vector<int> (n+1,-1));
        int ans = solveUsingRecursionMem(arr, maxi, start, end,dp);
        return ans;
    }
};
