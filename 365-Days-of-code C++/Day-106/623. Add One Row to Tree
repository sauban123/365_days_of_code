/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode*  solve(TreeNode * root , int val , int depth , int curr ){
        if(!root){
            return NULL ;
        }
        if(curr == depth-1){
            TreeNode* left = root->left;
            TreeNode* right = root->right;
           
           TreeNode *l = new TreeNode(val);  //or yahi par root->left karke create karlo
           TreeNode * r = new TreeNode(val); // like -> root->left = newTreeNode(val);
           root->left = l;
           root->right = r;
           root->left->left = left;
           root->right ->right =  right;
        }
        solve(root->left, val , depth, curr+1);
        solve(root->right ,val, depth , curr+1);
        return root;
    }

    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth ==1){
            // add at the root node
            TreeNode * newroot = new TreeNode(val);
            newroot->left = root;
            return newroot;
        }
        int curr =1;
        // isme 1 ke liya solve ho gy hai isliye 1 pass karenge depth ko
        return solve(root, val , depth, curr);

    }
};
