class Solution {
public:
    int solveUsingRecursion(string a , string b, int i ,int j){
        // base case
        if (i>=a.size()){
            return 0;
        }
        if(j>=b.size()){
            return 0;
        }
        int ans =0;
        if(a[i] == b[j]){
            ans = 1 + solveUsingRecursion(a, b, i+1, j+1);
        }
        else{
            // two cases 
            ans  = 0+ max(solveUsingRecursion(a, b, i, j+1)
                         ,solveUsingRecursion(a, b, i+1, j) );
        }
        return ans;
    }
// string ko pass by referece karne se chla jata hai saare test cases if TLE of few
    int solveUsingMem(string& a , string& b, int i ,int j, vector<vector<int> > &dp){
        // base case
        if (i>=a.size()){
            return 0;
        }
        if(j>=b.size()){
            return 0;
        }
        // check if already exist
         if(dp[i][j] != -1){
             return dp[i][j];
         }
         
        int ans =0;
        if(a[i] == b[j]){
            ans = 1 + solveUsingMem(a, b, i+1, j+1,dp);
        }
        else{
            // two cases 
            ans  = 0+ max(solveUsingMem(a, b, i, j+1,dp)
                         ,solveUsingMem(a, b, i+1, j,dp) );
        }
        dp[i][j] = ans;
        return dp[i][j];
    }
    int longestCommonSubsequence(string text1, string text2) {
        int i=0,j=0;
        vector<vector<int> > dp(text1.size()+1, vector<int>(text2.size()+1,-1));
        int ans = solveUsingMem(text1, text2, i ,j,dp);
        return ans;
    }
};
