class Solution {
public:
    int solve(int i,char last, string &s, int k, vector<vector<int>> &dp ){
        if(i== s.length()){
            return 0;
        }
        // check if already exist
        if(dp[i][last-'a'] != -1){
            return dp[i][last-'a'];
        }  
        int include =0,exclude =0;
        if(last == '{' || abs(s[i] - last) <= k){
            // last character curr s[i] se replace ho jaega 
            // aur yahi last next se compare hoga 
            include  = 1+ solve(i+1,s[i],s,k,dp);
        }
        exclude = solve(i+1,last,s,k,dp);
        dp[i][last-'a'] = max(include , exclude);
        return dp[i][last-'a'];
    }
    int longestIdealString(string s, int k) {
        int n= s.length();
        vector<vector<int>> dp(n,vector<int>(27,-1));
        return solve(0,'{',s,k,dp);
    }
};
