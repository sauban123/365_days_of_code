class Solution {
public:
    int solveUsingRecursion(string a , string b, int i ,int j){
        // base case
        if (i>=a.size()){
            return 0;
        }
        if(j>=b.size()){
            return 0;
        }
        int ans =0;
        if(a[i] == b[j]){
            ans = 1 + solveUsingRecursion(a, b, i+1, j+1);
        }
        else{
            // two cases 
            ans  = 0+ max(solveUsingRecursion(a, b, i, j+1)
                         ,solveUsingRecursion(a, b, i+1, j) );
        }
        return ans;
    }
// string ko pass by referece karne se chla jata hai saare test cases if TLE of few
    int solveUsingMem(string& a , string& b, int i ,int j, vector<vector<int> > &dp){
        // base case
        if (i>=a.size()){
            return 0;
        }
        if(j>=b.size()){
            return 0;
        }
        // check if already exist
         if(dp[i][j] != -1){
             return dp[i][j];
         }

        int ans =0;
        if(a[i] == b[j]){
            ans = 1 + solveUsingMem(a, b, i+1, j+1,dp);
        }
        else{
            // two cases 
            ans  = 0+ max(solveUsingMem(a, b, i, j+1,dp)
                         ,solveUsingMem(a, b, i+1, j,dp) );
        }
        dp[i][j] = ans;
        return dp[i][j];
    }

    int solveUsingTabulation(string &a , string &b){
        vector<vector<int> > dp(a.size()+1, vector<int>(b.size()+1,0));
        // isme i and j ki direction opposite kardo jo memoisation me thi 
        for(int i_index =a.size()-1;i_index>=0;i_index--){
            for(int j_index = b.size()-1 ; j_index>=0;j_index--){
                int ans =0;
                if(a[i_index] == b[j_index]){
                    ans = 1 + dp[i_index+1][j_index+1];
                }
                else{
                // two cases 
                    ans  = 0+ max(dp[i_index][j_index+1] ,dp[i_index+1][j_index] );
                }
                dp[i_index][j_index] = ans;
            }
        }
        // jo starting me pass ki thi wahi ans banega i,j 0 pass kiya tha
        return dp[0][0];
    }

    int solveUsingTabulationSO(string& a , string &b ){
        vector<int> curr(a.length()+1,0);
        vector<int> next(a.length()+1,0);
        for(int j_index = b.size()-1 ; j_index>=0;j_index--){
            for(int i_index =a.size()-1;i_index>=0;i_index--){
                int ans =0;
                if(a[i_index] == b[j_index]){
                    ans = 1 + next[i_index+1];
                }
                else{
                // two cases 
                    ans  = 0 + max(next[i_index] ,curr[i_index+1] );
                }
                curr[i_index] = ans;
            }
            // shifting 
            next = curr;
        }
        return next[0];
    }
    int longestCommonSubsequence(string text1, string text2) {
       // int i=0,j=0;
       // vector<vector<int> > dp(text1.size()+1, vector<int>(text2.size()+1,-1));
        int ans = solveUsingTabulationSO(text1, text2);
        return ans;
    }
};
